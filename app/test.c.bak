/* First configure the timer interrupt of TM4C123 to generate an interrupt
 after every one second. Second, inside the interrupt service routine of the timer, 
sample the analog signal value with ADC and turn off ADC sampling before 
returning from the interrupt service routine. */ 


#include "TM4C123.h"
#include "nvic.c" 
#define BLUE (1<<2)
#define RED (1<<4)
#define Green (1<<8)
#define NVIC_Type.ISER[0] = 21;


int main(void)
{
	SYSCTL->RCGCGPIO |= 0x20; // turn on bus clock for GPIOF
  GPIOF->DIR       |= BLUE; //set GREEN pin as a digital output pin
  GPIOF->DEN       |= BLUE;
  Time1A_1sec_delay();
  while(1)
  {
	  // do nothing wait for the interrupt to occur
  }
	void TIMER1A_Handler(void) {
		SYSCTL_RCGCTIMER_R  |= (1<<1); //SYSCTL->RCGCTIMER |= (1<<1); // /*enable clock Timer1 subtimer A in run mode */


		//Before initialization, disables the Timer1
		TIMER1_CTL_R = 0;


		// // Configure the timer1
		TIMER1_CFG_R = 0x04 // For a 16/32-bit timer, this value selects the 16-bit timer configuration.


		TIMER1_TAMR_R = 0x02; 

		// Max_delay = 2^16 / 16*10e6 = 4.096 millisecond
		// using a Prescaler value of 250 = 16000000/250 = 64000Hz 
		TIMER1_TAPR_R = 250-1;
		TIMER1_TAILR_R = = 64000 - 1 ; /* TimerA counter starting count down value  */

		// GPTMICR register is used to clear the timeout flag bit of timer. 
		TIMER1_ICR_R = 0x01;

		//
		TIMER1_IMR_R |=(1<<0);

		// After Configuration
		TIMER1_CTL_R  |=0x01 ; /* Enable TimerA module */
		NVIC_EnableIRQ(NVIC_Type.ISER[0]); 
	}
	
}

TIMER1A_Handler(){
	if(TIMER1->MIS & 0x1)
       GPIOF->DATA  ^= Blue; /* toggle Blue LED*/
       TIMER1->ICR = 0x1;          /* Timer1A timeout flag bit clears*/
}